/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppAuthedRouteImport } from './routes/app/_authed'
import { Route as AppAuthedIndexRouteImport } from './routes/app/_authed/index'
import { Route as AppAuthedLinksRouteImport } from './routes/app/_authed/links'
import { Route as AppAuthedEvaluationsRouteImport } from './routes/app/_authed/evaluations'
import { Route as AppAuthedCreateRouteImport } from './routes/app/_authed/create'
import { Route as AppAuthedLinkIdRouteImport } from './routes/app/_authed/link.$id'

const AppRouteImport = createFileRoute('/app')()

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppAuthedRoute = AppAuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => AppRoute,
} as any)
const AppAuthedIndexRoute = AppAuthedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppAuthedRoute,
} as any)
const AppAuthedLinksRoute = AppAuthedLinksRouteImport.update({
  id: '/links',
  path: '/links',
  getParentRoute: () => AppAuthedRoute,
} as any)
const AppAuthedEvaluationsRoute = AppAuthedEvaluationsRouteImport.update({
  id: '/evaluations',
  path: '/evaluations',
  getParentRoute: () => AppAuthedRoute,
} as any)
const AppAuthedCreateRoute = AppAuthedCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AppAuthedRoute,
} as any)
const AppAuthedLinkIdRoute = AppAuthedLinkIdRouteImport.update({
  id: '/link/$id',
  path: '/link/$id',
  getParentRoute: () => AppAuthedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppAuthedRouteWithChildren
  '/app/create': typeof AppAuthedCreateRoute
  '/app/evaluations': typeof AppAuthedEvaluationsRoute
  '/app/links': typeof AppAuthedLinksRoute
  '/app/': typeof AppAuthedIndexRoute
  '/app/link/$id': typeof AppAuthedLinkIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppAuthedIndexRoute
  '/app/create': typeof AppAuthedCreateRoute
  '/app/evaluations': typeof AppAuthedEvaluationsRoute
  '/app/links': typeof AppAuthedLinksRoute
  '/app/link/$id': typeof AppAuthedLinkIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/_authed': typeof AppAuthedRouteWithChildren
  '/app/_authed/create': typeof AppAuthedCreateRoute
  '/app/_authed/evaluations': typeof AppAuthedEvaluationsRoute
  '/app/_authed/links': typeof AppAuthedLinksRoute
  '/app/_authed/': typeof AppAuthedIndexRoute
  '/app/_authed/link/$id': typeof AppAuthedLinkIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/create'
    | '/app/evaluations'
    | '/app/links'
    | '/app/'
    | '/app/link/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/app/create'
    | '/app/evaluations'
    | '/app/links'
    | '/app/link/$id'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/_authed'
    | '/app/_authed/create'
    | '/app/_authed/evaluations'
    | '/app/_authed/links'
    | '/app/_authed/'
    | '/app/_authed/link/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/_authed': {
      id: '/app/_authed'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppAuthedRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/_authed/': {
      id: '/app/_authed/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppAuthedIndexRouteImport
      parentRoute: typeof AppAuthedRoute
    }
    '/app/_authed/links': {
      id: '/app/_authed/links'
      path: '/links'
      fullPath: '/app/links'
      preLoaderRoute: typeof AppAuthedLinksRouteImport
      parentRoute: typeof AppAuthedRoute
    }
    '/app/_authed/evaluations': {
      id: '/app/_authed/evaluations'
      path: '/evaluations'
      fullPath: '/app/evaluations'
      preLoaderRoute: typeof AppAuthedEvaluationsRouteImport
      parentRoute: typeof AppAuthedRoute
    }
    '/app/_authed/create': {
      id: '/app/_authed/create'
      path: '/create'
      fullPath: '/app/create'
      preLoaderRoute: typeof AppAuthedCreateRouteImport
      parentRoute: typeof AppAuthedRoute
    }
    '/app/_authed/link/$id': {
      id: '/app/_authed/link/$id'
      path: '/link/$id'
      fullPath: '/app/link/$id'
      preLoaderRoute: typeof AppAuthedLinkIdRouteImport
      parentRoute: typeof AppAuthedRoute
    }
  }
}

interface AppAuthedRouteChildren {
  AppAuthedCreateRoute: typeof AppAuthedCreateRoute
  AppAuthedEvaluationsRoute: typeof AppAuthedEvaluationsRoute
  AppAuthedLinksRoute: typeof AppAuthedLinksRoute
  AppAuthedIndexRoute: typeof AppAuthedIndexRoute
  AppAuthedLinkIdRoute: typeof AppAuthedLinkIdRoute
}

const AppAuthedRouteChildren: AppAuthedRouteChildren = {
  AppAuthedCreateRoute: AppAuthedCreateRoute,
  AppAuthedEvaluationsRoute: AppAuthedEvaluationsRoute,
  AppAuthedLinksRoute: AppAuthedLinksRoute,
  AppAuthedIndexRoute: AppAuthedIndexRoute,
  AppAuthedLinkIdRoute: AppAuthedLinkIdRoute,
}

const AppAuthedRouteWithChildren = AppAuthedRoute._addFileChildren(
  AppAuthedRouteChildren,
)

interface AppRouteChildren {
  AppAuthedRoute: typeof AppAuthedRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppAuthedRoute: AppAuthedRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
